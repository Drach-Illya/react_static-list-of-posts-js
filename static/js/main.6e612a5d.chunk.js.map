{"version":3,"sources":["components/CommentInfo/CommentInfo.jsx","components/CommentList/CommentList.jsx","components/UserInfo/UserInfo.jsx","components/PostInfo/PostInfo.jsx","components/PostList/PostList.jsx","App.jsx","index.jsx"],"names":["CommentInfo","comment","name","email","body","className","href","CommentList","comments","map","id","UserInfo","user","PostInfo","post","title","userId","length","PostList","posts","commentsList","users","postExtra","find","filter","postId","App","postsFromServer","commentsFromServer","usersFromServer","ReactDOM","render","document","getElementById"],"mappings":"q38IAEaA,EAAc,SAAC,GAAD,QACzBC,QACEC,EAFuB,EAEvBA,KACAC,EAHuB,EAGvBA,MACAC,EAJuB,EAIvBA,KAJuB,OAOzB,sBAAKC,UAAU,cAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,wBAAQA,UAAU,oBAAlB,mBAA0CH,KAEzC,OAED,mBACEG,UAAU,qBACVC,KAAI,iBAAYH,GAFlB,mBAIMA,QAIR,qBAAKE,UAAU,oBAAf,mBACMD,SCrBGG,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzB,qBAAKH,UAAU,cAAf,SACGG,EAASC,KAAI,SAAAR,GAAO,OACnB,cAAC,EAAD,CAAaA,QAASA,GAAcA,EAAQS,UCJrCC,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACtB,mBAAGP,UAAU,WAAWC,KAAI,iBAAYM,EAAKT,OAA7C,mBACMS,EAAKV,UCAAW,EAAW,SAAC,GAAD,QACtBC,KAGEC,GAJoB,EAEpBL,GAFoB,EAGpBM,OAHoB,EAIpBD,OACAX,EALoB,EAKpBA,KACAQ,EANoB,EAMpBA,KANoB,IAOpBJ,gBAPoB,MAOT,GAPS,SAUtB,sBAAKH,UAAU,WAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,kBAAd,mBACMU,KAGN,8BACG,eAED,cAAC,EAAD,CAAUH,KAAMA,UAIpB,mBAAGP,UAAU,iBAAb,mBACMD,KAGgB,IAApBI,EAASS,OAEP,qCACE,uBAEA,mBAAG,UAAQ,oBAAX,gCAGD,cAAC,EAAD,CAAaT,SAAUA,QCpCnBU,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,MAAxB,OACtB,qBAAKhB,UAAU,WAAf,SACGc,EAAMV,KAAI,SAACK,GACV,IAAMQ,EAAS,2BACVR,GADU,IAEbF,KAAMS,EAAME,MAAK,SAAAX,GAAI,OAAIE,EAAKE,SAAWJ,EAAKF,MAC9CF,SAAUY,EACPI,QAAO,SAAAvB,GAAO,OAAIA,EAAQwB,SAAWX,EAAKJ,QAI/C,OACE,cAAC,EAAD,CACEI,KAAMQ,GACDR,EAAKJ,U,qBCVPgB,EAAM,kBACjB,0BAASrB,UAAU,MAAnB,UACE,oBAAIA,UAAU,aAAd,kCAEA,cAAC,EAAD,CACEc,MAAOQ,EACPP,aAAcQ,EACdP,MAAOQ,QCVbC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6e612a5d.chunk.js","sourcesContent":["import './CommentInfo.scss';\n\nexport const CommentInfo = ({\n  comment: {\n    name,\n    email,\n    body,\n  },\n}) => (\n  <div className=\"CommentInfo\">\n    <div className=\"CommentInfo__title\">\n      <strong className=\"CommentInfo__name\">{`${name}`}</strong>\n\n      {' by '}\n\n      <a\n        className=\"CommentInfo__email\"\n        href={`mailto:${email}`}\n      >\n        {`${email}`}\n      </a>\n    </div>\n\n    <div className=\"CommentInfo__body\">\n      {`${body}`}\n    </div>\n  </div>\n);\n","import './CommentList.scss';\nimport { CommentInfo } from '../CommentInfo';\n\nexport const CommentList = ({ comments }) => (\n  <div className=\"CommentList\">\n    {comments.map(comment => (\n      <CommentInfo comment={comment} key={comment.id} />\n    ))}\n  </div>\n);\n","import './UserInfo.scss';\n\nexport const UserInfo = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {`${user.name}`}\n  </a>\n);\n","import './PostInfo.scss';\nimport { CommentList } from '../CommentList';\nimport { UserInfo } from '../UserInfo';\n\nexport const PostInfo = ({\n  post: {\n    id,\n    userId,\n    title,\n    body,\n    user,\n    comments = [],\n  },\n}) => (\n  <div className=\"PostInfo\">\n    <div className=\"PostInfo__header\">\n      <h3 className=\"PostInfo__title\">\n        {`${title}`}\n      </h3>\n\n      <p>\n        {' Posted by  '}\n\n        <UserInfo user={user} />\n      </p>\n    </div>\n\n    <p className=\"PostInfo__body\">\n      {`${body}`}\n    </p>\n\n    {(comments.length === 0)\n      ? (\n        <>\n          <hr />\n\n          <b data-cy=\"NoCommentsMessage\">No comments yet</b>\n        </>\n      )\n      : (<CommentList comments={comments} />)\n    }\n  </div>\n);\n","import './PostList.scss';\nimport { PostInfo } from '../PostInfo';\n\nexport const PostList = ({ posts, commentsList, users }) => (\n  <div className=\"PostList\">\n    {posts.map((post) => {\n      const postExtra = {\n        ...post,\n        user: users.find(user => post.userId === user.id),\n        comments: commentsList\n          .filter(comment => comment.postId === post.id),\n      };\n      // assembled the postExtra above for test compitability\n\n      return (\n        <PostInfo\n          post={postExtra}\n          key={post.id}\n        />\n      );\n    })}\n  </div>\n);\n","import './App.scss';\nimport { PostList } from './components/PostList';\n\nimport postsFromServer from './api/posts.json';\nimport commentsFromServer from './api/comments.json';\nimport usersFromServer from './api/users.json';\n\nexport const App = () => (\n  <section className=\"App\">\n    <h1 className=\"App__title\">Static list of posts</h1>\n\n    <PostList\n      posts={postsFromServer}\n      commentsList={commentsFromServer}\n      users={usersFromServer}\n    />\n  </section>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}